1) Identify a group of patients reasonably similar to each other.
1b) (optional) Identify a set of external references that are reasonably similar to your patients.
2) Run phylotypes.py with any genome window coordinates at all - it doesn't matter. Use the -A flag to specify an external reference alignment if you did step (1b).
3) Inspect temp_RefsAln.fasta which will have been produced. Use this to identify the coordinates you actually want to use. Windows should not contain too many gappy positions/columns, because the window should be short enough that each patient has enough fully overlapping reads, but long enough to allow phylogenetic distinction. The more insertions / the longer the insertions present in the window, the shorter the window becomes when translated to those patients that don't have the insertion(s).
4) Run phylotypes.py with the --no-trees option.
5) Assuming that all of the bam filenames you've included start with the string 'BEE', and that no external references included in step (1b) start with the string 'BEE', run
for i in AlignedReadsInWindow_*.fasta; do echo "$i"; grep -e '^>BEE' "$i" | awk -F_ '{print $1}' | sort | uniq | wc -l; echo; done
This counts, for each window, how many bam files have at least one sequence present. If it's less than the number of bam files you included, that could be because some patients have no coverage at that point (about which you can do nothing), or you chose a window longer than the read length for some patients, or you set the MinReadCount or MIN_BASE_QUALITY so high you threw away all the reads from some patients. Tweak parameters and re-run phylotypes.py --no-trees if desired.
6) With the same naming assumption as in the previous step, run
for i in AlignedReadsInWindow_*.fasta; do echo "$i"; grep -e '^>BEE' "$i" | awk -F_ '{print $1}' | sort | uniq -c; echo; done
This counts, for each window, how many different sequences each bam files has. These counts should be small enough that you can make a tree in finite time, but large enough that you can see some within-host diversity. e.g. if every patient has only a single sequence, this becomes a regular tree instead of a phylotype tree - there's no possibility to see one patient inside another. To increase these counts, you could decrease MinReadCount, decrease MIN_BASE_QUALITY, change MergingThreshold, or change the window width.
Decreasing the MergingThreshold means you'll see a greater number of different sequences for each patient but each having lower counts; so if your MinReadCount is very low this is likely to increase the number of different sequences you have per patient, and if your MinReadCount is very high this is likely to decrease the number of different sequences you have per patient.
Decreasing the width of the window means you'll have a greater number of reads overlapping it, but the overhangs will be longer and if these are trimmed, differences in them get ignored. This means if your window width is very close to your read length, decreasing it is likely to increase the number of different sequences you have per patient; if your window width is much smaller than your read length, decreasing it further is likely to decrease the number of different sequences you have per patient.
Tweak parameters until the numbers of different sequences you have for each patient in each window are good.
7) Before spending a lot of time generating trees, you could eyeball AlignedReadsInWindow_*.fasta to see if there is enough phylogenetic signal to allow the trees to tell you something.
8) Run phylotypes.py without --no-trees...
