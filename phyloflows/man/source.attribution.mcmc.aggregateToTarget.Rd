% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.R
\name{source.attribution.mcmc.aggregateToTarget}
\alias{source.attribution.mcmc.aggregateToTarget}
\title{Aggregate MCMC output to target parameters}
\usage{
source.attribution.mcmc.aggregateToTarget(mcmc.file = NULL, mc = NULL,
  daggregateTo = NULL, control = list(burnin.p = NA_real_, thin =
  NA_integer_, regex_pars = "*", outfile = gsub("\\\\.rda",
  "_aggregated.csv", mcmc.file)))
}
\arguments{
\item{mcmc.file}{Full file name to MCMC output from function \code{source.attribution.mcmc}}

\item{mc}{MCMC object from function \code{source.attribution.mcmc}; this can be specified alternatively to `mcmc.file`.}

\item{daggregateTo}{Data.table that maps the categories of transmission pairs used in the MCMC to lower-dimensional categories that are of primary interest.}

\item{control}{List of input arguments that control the behaviour of the source attribution algorithm:
\itemize{
 \item{"burnin.p"}{Proportion of MCMC iterations that are removed as burn-in period.}
 \item{"thin"}{Thin MCMC output to every nth MCMC iteration.}
 \item{"regex_pars"}{Regular expression to select the parameters that are to be aggregated.}
 \item{"outfile"}{Full file name of the output csv file.}
}}
}
\value{
If `outfile` is not specified, aggregated Monte Carlo samples are returned, as a data.table. If `outfile` is specified and ends in `csv`, the output is written to a csv file. If `outfile` is specified and ends in `rda`, the output is written to a rda file.
}
\description{
Aggregate MCMC output to target parameters
}
\examples{
require(data.table)
require(phyloflows)
# load input data set
data(twoGroupFlows1, package="phyloflows")
dobs <- twoGroupFlows1$dobs
dprior <- twoGroupFlows1$dprior
# load MCMC output obtained with
# control <- list(seed=42, mcmc.n=5e4, verbose=0)
# mc <- phyloflows:::source.attribution.mcmc(dobs, dprior, control)
data(twoGroupFlows1_mcmc, package="phyloflows")

#
# aggregate MCMC output and return output to R
#
daggregateTo <- subset(dobs, select=c(TRM_CAT_PAIR_ID, TR_TRM_CATEGORY, REC_TRM_CATEGORY))
daggregateTo[, TR_TARGETCAT:= TR_TRM_CATEGORY]#>    TRM_CAT_PAIR_ID TR_TRM_CATEGORY REC_TRM_CATEGORY TR_TARGETCAT
daggregateTo[, REC_TARGETCAT:= 'Any']
set(daggregateTo, NULL, c('TR_TRM_CATEGORY','REC_TRM_CATEGORY'), NULL)
control <- list( burnin.p=0.05, thin=NA_integer_, regex_pars='PI')
pars <- phyloflows:::source.attribution.mcmc.aggregateToTarget(mc=mc, daggregateTo=daggregateTo, control=control)#>
 
#
# if the source attribution model is complex 
# the MCMC output tends to be large, and it is 
# better to load the MCMC output internally, so
# pass a file name to the function
#
\dontrun{
mcmc.file <- 'mcmc_output.rda'  # MCMC output 
daggregateTo <- subset(dobs, select=c(TRM_CAT_PAIR_ID, TR_TRM_CATEGORY, REC_TRM_CATEGORY))
daggregateTo[, TR_TARGETCAT:= TR_TRM_CATEGORY]
daggregateTo[, REC_TARGETCAT:= 'Any']
set(daggregateTo, NULL, c('TR_TRM_CATEGORY','REC_TRM_CATEGORY'), NULL)
control <- list( burnin.p=0.05, thin=NA_integer_, regex_pars='PI')
pars <- phyloflows:::source.attribution.mcmc.aggregateToTarget(mcmc.file=mcmc.file, daggregateTo=daggregateTo, control=control)
}

#
# you can also write the aggregated output to file
#
\dontrun{
mcmc.file <- 'mcmc_output.rda'  # MCMC output
agg.mcmc.file <-  'agg_mcmc_output.rda' # store results here; this can also be a csv file
daggregateTo <- subset(dobs, select=c(TRM_CAT_PAIR_ID, TR_TRM_CATEGORY, REC_TRM_CATEGORY))
daggregateTo[, TR_TARGETCAT:= TR_TRM_CATEGORY]
daggregateTo[, REC_TARGETCAT:= 'Any']
set(daggregateTo, NULL, c('TR_TRM_CATEGORY','REC_TRM_CATEGORY'), NULL)
control <- list( burnin.p=0.05, thin=NA_integer_, regex_pars='PI', outfile=agg.mcmc.file)
pars <- phyloflows:::source.attribution.mcmc.aggregateToTarget(mcmc.file=mcmc.file, daggregateTo=daggregateTo, control=control)
}

}
\seealso{
\link{\code{source.attribution.mcmc}}, \link{\code{source.attribution.mcmc.getKeyQuantities}}
}
