---
title: "Source attribution under SARWS assumption"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

We start by simulating data required for this task. 'dg' is a data table containing the number of individuals who are eligible (**TRIAL**) and sampled (**SUC**) for each subpopulation (**CATEGORY**). Assume there are two subpopulations where the numbers of infected individuals are 2000 and 2500 and sequencing rates are 0.6 and 0.45.

```{r} 
library(data.table)
library(TransSubpopulation)
set.seed(123)
dg<-data.table(CATEGORY=c(1,2),TRIAL=c(2000,2500),P_SEQ_EMP=c(0.6,0.45))
dg[,SUC:=TRIAL*P_SEQ_EMP]
```


'dc' a data table containing subpopulations transmitting (**TR_CATEGORY**) and receiving (**REC_CATEGORY**) the disease. Empirical sequencing rates for each subpopulation are used to evaluate the probability of a transmission between two subpopulations being observed (**S**).

```{r} 
dc<-data.table(TR_CATEGORY=c(1,2,1,2),REC_CATEGORY=c(1,1,2,2))
tmp<-subset(dg,select=c('CATEGORY','P_SEQ_EMP'))
setnames(tmp,colnames(tmp),paste0('TR_',colnames(tmp)))
dc<-merge(dc,tmp,by='TR_CATEGORY')
setnames(tmp,colnames(tmp),gsub('TR_','REC_',colnames(tmp)))
dc<-merge(dc,tmp,by='REC_CATEGORY')
dc[,S:=TR_P_SEQ_EMP*REC_P_SEQ_EMP]
```

Assume the probability of transmissions between subpopulations to be $\pi=(0.36,0.04,0.06,0.54)$.
```{r} 
TRUE_PI<-c(0.36,0.04,0.06,0.54)
```

Assume the observed transmission count is 300, and the observed transmissions between subpopulations can be simulated as follows:

1. generate the true transmission count $Z \sim \mbox{Poisson} (300/S)$
2. generate the true transmissions between groups $z \sim \mbox{Multinomial} (Z,\pi)$
3. generate the observed transmissions between groups $n_{ab} \sim \mbox{Binomial} (z_{ab},\vartheta_{ab}), \forall a,b$

```{r} 
N<-rpois(1,300/mean(dc$S))
z<-rmultinom(1,size=N,prob=TRUE_PI)
n<-matrix(NA_integer_,ncol=1,nrow=length(TRUE_PI))
for (i in 1:length(TRUE_PI)){
  n[i]<-rbinom(1,size=z[i],dc$S[i])
}
```

Observed transmissions between groups are recorded from the simulation and ids are set for stratified transmissions. 'df.sampling' is a list of data table and includes 'dg'.
```{r} 
dc$OBS<-n
dc$COUNT_ID<-1:nrow(dc)

# remove irrelevant terms
dg$P_SEQ_EMP<-NULL
dc$TR_P_SEQ_EMP<-NULL
dc$REC_P_SEQ_EMP<-NULL
dc$S<-NULL
```

df.sampling is a list of data table composed of dg.
```{r} 
df.sampling<-list()
df.sampling[[1]]<-dg
```

Here we present the form of the inputs of prior generator under SARWS, i.e. **df.sampling** and **dc**.
```{r,echo=FALSE} 
library(knitr)
kable(df.sampling[[1]],caption = 'df.sampling[[1]]')
kable(dc,caption = 'dc')
```

We now draw samples from the prior distribution under SARWS assumption using function 'samples.from.SARWS.prior' from this package. 

```{r}
samples.from.SARWS.prior(df.sampling=df.sampling,dc=dc,iteration=1e5,seed=123)
```

Information required (i.e. unique.pairs.index, S.DTL.prior and TR_OBS) for implementing the algorithm is loaded. The algorithm aims to infer the proportion of transmissions between subpopulations when correcting for sampling differences.
```{r}
load('InputsMCMC_SARWS1e+05.rda')
mcmc.core.inference(s.dtl.prior=S.DTL.prior,tr.obs=TR_OBS)
```


Then the results from the algorithm can be extracted and we summarised the proportions of transmissions between subpopulations in the table below.
```{r}
load('core_correct_inference_SNPIZ_mcmcEachCount.rda')
# runtime of the algorithm
print(time)

PI.summary<-data.table(PI_MEDIAN=apply(mc$pars$PI,2,median),
                       PI_LOWER=apply(mc$pars$PI,2,function(x){quantile(x,0.025)}),
                       PI_UPPER=apply(mc$pars$PI,2,function(x){quantile(x,0.975)}),
                       PI_TRUE=TRUE_PI,
                       ID=1:4)
```


```{r,echo=FALSE}
kable(PI.summary,caption = 'summary of PI')
```

If you want to visualise MCMC convergence diagnostics, you may use the function 'mcmc.core.inference.diagnostics' and all the results are saved in your computer.
```{r}
mcmc.core.inference.diagnostics(mc,2e3)
```

